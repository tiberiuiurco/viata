#+PROPERTY: header-args :tangle "init.el"
#+auto_tangle: t
#+AUTHOR: Iurco Tiberiu-Iulian
#+startup: content indent

* PACKAGE MANAGER
** USE-PACKAGE
Uses builtin ~use-package~ available for emacs > =29=.

#+begin_src emacs-lisp
  (require 'use-package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (setq use-package-always-ensure t
        use-package-expand-minimally t
        )
#+end_src
** CUSTOM SCRIPTS
#+begin_src emacs-lisp
(dolist (path '("scripts"))
  (add-to-list 'load-path (locate-user-emacs-file path)))
#+end_src
* TEMP ORG-TEMPO
#+begin_src emacs-lisp
    (use-package org-tempo
    :ensure nil
    :config
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src
* COMPLETION
** MINIBUFFER COMPLETION
#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t) 
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

  (use-package orderless
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

  ;; Consult and Org Roam Support
  (use-package consult
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
    )

  (use-package wgrep) ;; Makes grep buffers editable
#+end_src
** COMPLETION AT POINT
Corfu + treesitter + flymake
#+begin_src emacs-lisp
(use-package corfu
  ;; Optional customizations
  ;; :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  :init
  (global-corfu-mode))

;; Programming
(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode)
  (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode)))

(require 'eglot)
(add-hook 'c++-ts-mode-hook 'eglot-ensure)
(setq eldoc-echo-area-use-multiline-p nil)
(use-package eldoc-box
  :hook (eldoc-mode . eldoc-box-hover-mode)
  :config
  (global-set-key (kbd "C-h D") #'eldoc-box-help-at-point))
  
 
(require 'flymake)
#+end_src

* ORG MODE
** ORG CONFIG
#+begin_src emacs-lisp
(require 'org)
(use-package org-modern
  :hook (org-mode . org-modern-mode))

(setq org-log-done 'time)
(setq org-agenda-start-with-log-mode t)
(setq org-agenda-todo-ignore-with-date t)
(setq org-agenda-todo-ignore-timestamp t)
(setq org-agenda-todo-ignore-scheduled t)
(setq org-agenda-todo-ignore-deadlines t)

(setq org-agenda-show-inherited-tags t) ;; already default
(setq org-agenda-tags-column -100)
(setq org-agenda-view-columns-initially nil)
(setq org-agenda-start-with-clockreport-mode t)
(setq org-agenda-start-with-log-mode nil)

(setq org-log-done nil
      org-log-into-drawer t
      org-agenda-skip-scheduled-if-done t)

(setq org-agenda-window-setup 'current-window)

;; mine
(setq backup-directory-alist '((".*" . "~/.Trash")))
(setq initial-major-mode 'org-mode)
(setq initial-scratch-message "")

(setq org-directory (expand-file-name "~/Documents/Files/3 Org/gtd/"))
(setq org-agenda-files `(,org-directory))

(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d!)" "CANCELLED(c)")
        ))
(setq org-tag-alist
      '((:startgroup)
                                        ; Put mutually exclusive tags here
        (:endgroup)
        ;; Places
        ("@home" . ?H)
        ("@work" . ?W)
        ("@uni" . ?U)

        ;; Devices
        ("@computer" . ?C)
        ("@phone" . ?P)

        ;; Activities
        ("@planning" . ?n)
        ("jobhunting" . ?j)
        ("@programming" . ?p)
        ("@writing" . ?w)
        ("@studying" . ?s)
        ("@email" . ?e)
        ("@calls" . ?c)
        ("@explore" .?x)
        ("@emacs" .?m)
        ("@errands" . ?r)))

(setq org-agenda-custom-commands
      '(("d" "Dashboard"
         ((agenda "" ((org-deadline-warning-days 7) (org-agenda-span 7) (org-agenda-start-day "today")))
          (tags-todo "+PRIORITY=\"A\"" ((org-agenda-overriding-header "High Priority Tasks")))
          (tags-todo "@lab" ((org-agenda-overriding-header "Lab")
                             (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))))
          (tags-todo "@uni" ((org-agenda-overriding-header "University")
                             (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))))
          (tags-todo "-@lab-@uni-roam/TODO"
                     ((org-agenda-overriding-header "Next Tasks")
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))))
          ;; (tags-todo "roam" ((org-agenda-overriding-header "Roam")))
          ))

        ("l" "Daily Life"
         ((agenda "" ((org-deadline-warning-days 7) (org-agenda-span 7) (org-agenda-start-day "today")))
          (tags-todo "@uni/NEXT" ((org-agenda-overriding-header "University")))
          (tags-todo "-@lab-@uni-roam/NEXT"
                     ((org-agenda-overriding-header "Next Tasks")))
          ;; (tags-todo "roam" ((org-agenda-overriding-header "Roam")))
          ))

        ("n" "Next Tasks"
         ((todo "NEXT"
                ((org-agenda-overriding-header "Next Tasks")))))

        ("r" "Roam"
         ((tags-todo "roam" ((org-agenda-overriding-header "Roam")))))
        ("u" "Untagged Tasks" tags-todo "-{.*}")
        ("w" "Weekly Review"
         ((agenda ""
                  ((org-agenda-overriding-header "Completed Tasks")
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'done))
                   (org-agenda-span 'week)))))
	))

(setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t%-6e% s")
                                 (todo . " %i %-12:c %-6e")
                                 (tags . " %i %-12:c")
                                 (search . " %i %-12:c")))

(setq org-refile-targets
      '(("~/Documents/Files/3 Org/gtd/gtd.org" :maxlevel . 3)))

;; Save Org buffers after refiling!
(advice-add 'org-refile :after 'org-save-all-org-buffers)

(setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task Inbox BACKLOG" entry (file+olp "~/Documents/Files/3 Org/gtd/gtd.org" "Tasks")
         "* BACKLOG %?\n  %U\n  %a\n  %i" :empty-lines 1)
        ("tn" "Task Inbox NEXT" entry (file+olp "~/Documents/Files/3 Org/gtd/gtd.org" "Tasks")
         "* NEXT %?\n  %U\n  %a\n  %i" :empty-lines 1)
        ("ts" "Task Tickler Scheduled" entry (file+olp "~/Documents/Files/3 Org/gtd/gtd.org" "Tickler")
         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))

(require 'org-checklist)

(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)

(add-hook 'org-mode-hook
          '(lambda ()
             (auto-revert-mode 1)))

#+end_src
** OLIVETTI
#+begin_src emacs-lisp
(use-package olivetti
 :hook (org-mode . olivetti-mode)
)
#+end_src
** ORG AUTO TANGLE
Automatically tangle the org file ~on save~.
Set ~#+auto_tangle: t~ in the header of the file.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src
* ORG ROAM
#+begin_src emacs-lisp
  (use-package org-roam
    :commands (org-roam-node-list)
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/Files/3 Org/Roam")
    (org-roam-completion-everywhere t)
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry "* %<%I:%M %p>: %?"
             :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: dailies"))))
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date:%U\n")
        :unnarrowed t)
       ("l" "programming language" plain
        "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("b" "book notes" plain

        (file "~/Documents/Roam/Templates/BookNoteTemplate.org")
        :if-new (file+head "${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n#+filetags: Project")
        :unnarrowed t)
       )
     )
    (setq org-roam-node-display-template
          (concat "${title:*} "
                  (propertize "${tags:10}" 'face 'org-tag)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ;;("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n I" . org-roam-node-insert-immediate)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))

  (use-package org-roam-ui
    :ensure t
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start nil))

  (use-package consult-org-roam
    :init
    (require 'consult-org-roam)
    ;; Activate the minor mode
    (consult-org-roam-mode 1)
    :custom
    ;; Use `ripgrep' for searching with `consult-org-roam-search'
    (consult-org-roam-grep-func #'consult-ripgrep)
    ;; Configure a custom narrow key for `consult-buffer'
    (consult-org-roam-buffer-narrow-key ?r)
    ;; Display org-roam buffers right after non-org-roam buffers
    ;; in consult-buffer (and not down at the bottom)
    (consult-org-roam-buffer-after-buffers t)
    :config
    ;; Eventually suppress previewing for certain functions
    (consult-customize
     consult-org-roam-forward-links
     :preview-key "M-.")
    :bind
    ;; Define some convenient keybindings as an addition
    ("C-c n e" . consult-org-roam-file-find)
    ("C-c n b" . consult-org-roam-backlinks)
    ("C-c n B" . consult-org-roam-backlinks-recursive)
    ("C-c n l" . consult-org-roam-forward-links)
    ("C-c n r" . consult-org-roam-search))
#+end_src

* APPLICATIONS
** MAGIT
#+begin_src emacs-lisp
(use-package magit)
#+end_src
** ELFEED
#+begin_src emacs-lisp
(use-package elfeed
  :config
  ;; Somewhere in your .emacs file
  (setq elfeed-feeds
	'("https://protesilaos.com/master.xml"
	  "https://planet.emacslife.com/atom.xml"))
  )
#+end_src
* UI
** THEME
#+begin_src emacs-lisp
  (load-theme 'modus-vivendi)
#+end_src
* EMACS
** EMACS PACKAGE
#+begin_src emacs-lisp
(use-package emacs
  :custom
  ;; Support opening new minibuffers from inside existing minibuffers.
  (enable-recursive-minibuffers t)
  ;; Hide commands in M-x which do not work in the current mode.  Vertico
  ;; commands are hidden in normal buffers. This setting is useful beyond
  ;; Vertico.
  (read-extended-command-predicate #'command-completion-default-include-p)
  ;; TAB cycle if there are only few candidates
  ;; (completion-cycle-threshold 3)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (tab-always-indent 'complete)

  ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
  ;; try `cape-dict'.
  (text-mode-ispell-word-completion nil)

  ;; Hide commands in M-x which do not apply to the current mode.  Corfu
  ;; commands are hidden, since they are not used via M-x. This setting is
  ;; useful beyond Corfu.
  (read-extended-command-predicate #'command-completion-default-include-p)
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  )
#+end_src
** GET RID OF TEMP FILES
#+begin_src emacs-lisp
(setq custom-file (make-temp-file "emacs-custom-"))
#+end_src
* PROT
** DENOTE
#+begin_src emacs-lisp
(use-package denote
  :config
  (setq denote-directory (expand-file-name "~/testing/")
	denote-known-keywords '("emacs" "denote" "testing")
	denote-file-type 'text)
  (add-hook 'dired-mode-hook #'denote-dired-mode)
  :bind
  ("C-c d f" . denote-type)
  ("C-c d d" . denote-date)
  ("C-c d r" . denote-rename-file)
  ("C-c d l" . denote-link)
  ("C-c d i" . denote-link-after-creating)
  ("C-c d b" . denote-backlinks)
  ("C-c d z" . denote-signature)
  )
#+end_src
* MY CUSTOM
#+begin_src emacs-lisp
(global-set-key (kbd "C-c o v") #'visible-mode)
(global-visual-line-mode t)

(global-display-fill-column-indicator-mode t)
(setq-default fill-column 78)
(setq-default display-fill-column-indicator t)
;;(setq-default display-fill-column-indicator-character ?|)
#+end_src
